
CREATE COMPUTE MODULE Coppel_REST_Compute2
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE a CHARACTER;
		SET a = 'abc';
		DECLARE timestampFormatT CHARACTER 'yyyyMMddHHmmssSSSSSS';
		DECLARE timeStampChar CHARACTER;
		DECLARE timeStampChar2 TIMESTAMP;
		SET timeStampChar = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT timestampFormatT);
		SET timeStampChar2 = CAST( timeStampChar AS TIMESTAMP FORMAT timestampFormatT);
		IF(InputRoot.SOAP.Body.*:getProductPriceResponse.*:Product.*:pricebook_rate <> Environment.Variables.RecordDetails.pricebook_rate ) THEN
		PASSTHRU('INSERT INTO HCV33327.COPPEL_UPDATE_PRICE(ITEM_ID,OLD_PRICE,UPDATED_PRICE,ORDERS_PLACED_COUNT,TIME_STAMP,SOURCE_SYSTEM) VALUES(?,?,?,?,?,?)',Environment.Variables.RecordDetails.item_id,Environment.Variables.RecordDetails.pricebook_rate,InputRoot.SOAP.Body.*:getProductPriceResponse.*:Product.*:pricebook_rate,InputRoot.SOAP.Body.*:getProductPriceResponse.*:Product.*:orders_placed_count,timeStampChar2,'IIB');
		DELETE FIELD OutputRoot;
		SET OutputRoot.DFDL.Response.getProducts = Environment.Variables.RecordDetails;
		SET OutputRoot.DFDL.Response.wssoap = InputRoot.SOAP.Body.*:getProductPriceResponse.*:Product;
		SET OutputLocalEnvironment.Destination.File.Name = Environment.Variables.RecordDetails.item_id ||'-'||timeStampChar||'.csv';
		--PROPAGATE TO TERMINAL 'out2' DELETE NONE;
		RETURN TRUE;
	ELSE
		--SET OutputLocalEnvironment.Destination.File.Directory = '/user13/IIB/COPPEL';
		DELETE FIELD OutputRoot;
		SET OutputLocalEnvironment.Destination.File.Name = Environment.Variables.RecordDetails.item_id ||'-'||timeStampChar||'.csv';
		SET OutputRoot.DFDL.Response.getProducts = Environment.Variables.RecordDetails;
		SET OutputRoot.DFDL.Response.wssoap = InputRoot.SOAP.Body.*:getProductPriceResponse.*:Product;
		--PROPAGATE TO TERMINAL 'Out' DELETE NONE;
		--
		RETURN TRUE;
	END IF;

	RETURN TRUE;
END;

CREATE PROCEDURE CopyMessageHeaders() BEGIN
	DECLARE I INTEGER 1;
	DECLARE J INTEGER;
	SET J = CARDINALITY(InputRoot.*[]);
	WHILE I < J DO
		SET OutputRoot.*[I] = InputRoot.*[I];
		SET I = I + 1;
	END WHILE;
END;

CREATE PROCEDURE CopyEntireMessage() BEGIN
	SET OutputRoot = InputRoot;
END;
END MODULE;